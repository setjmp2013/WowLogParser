/*
 * NpcXmlExporter.java
 *
 * Created on den 19 september 2008, 22:31
 */

package wowlogparser.gui;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import wowlogparserbase.Fight;
import wowlogparserbase.FileLoader;

/**
 *
 * @author  racy
 */
public class NpcXmlExporter extends javax.swing.JFrame {
    Preferences prefs = Preferences.userRoot().node("NpcXmlExporter");
    Set<File> files;
    /** Creates new form NpcXmlExporter */
    public NpcXmlExporter() {
        initComponents();
        files = new HashSet<File>();
        jTableFiles.setModel(new DefaultTableModel(new String[]{"File"}, 0));
    }

    private void doProcessing() {
        String dir = prefs.get("outDir", "");
        final JFileChooser fc = new JFileChooser(new File(dir));
        int ret = fc.showSaveDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {

            Thread t = new Thread() {

                @Override
                public void run() {
                    super.run();
                    File outFile = fc.getSelectedFile();
                    prefs.put("outDir", outFile.getParent());

                    HashMap<Integer, String> mobMap = new HashMap<Integer, String>();
                    HashMap<String, Integer> invMobMap = new HashMap<String, Integer>();
                    final double len = files.size();
                    double counter = (double)0;
                    for (File f : files) {
                        FileLoader l = new FileLoader(f);
                        l.parse();
                        l.createFights();
                        for (Fight fight : l.getFightCollection().getFights()) {
                            mobMap.put(fight.getMobID(), fight.getName());
                            invMobMap.put(fight.getName(), fight.getMobID());
                        }
                        counter++;
                        final double counter2 = counter;
                        SwingUtilities.invokeLater(new Runnable() {

                            public void run() {
                                jProgressBar1.setValue((int)(counter2/len*100.0));
                            }
                        });
                    }

                    FileWriter fw = null;
                    try {
                        fw = new FileWriter(outFile);
                        Set<String> names = invMobMap.keySet();
                        List<String> namesList = new ArrayList<String>(names);
                        Collections.sort(namesList);
                        for (String name : namesList) {
                            int id = invMobMap.get(name);
                            fw.write("<mob name=\"" + name + "\" id=\"" + id + "\"/>" + "\n");
                        }
                    } catch (IOException iOException) {
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                JOptionPane.showMessageDialog(NpcXmlExporter.this, "Error writing file", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        });
                        
                    } finally {
                        if (fw != null) {
                            try {
                                fw.close();
                            } catch (IOException ex) {
                            }
                        }
                    }
                            

                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            jButtonPerform.setEnabled(true);
                        }
                    });                    
                }                
            };
            jButtonPerform.setEnabled(false);
            t.start();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonPerform = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFiles = new javax.swing.JTable();
        jButtonSelectFiles = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonPerform.setText("Do Npc Id parsing");
        jButtonPerform.setName("jButtonPerform"); // NOI18N
        jButtonPerform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPerformActionPerformed(evt);
            }
        });

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTableFiles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableFiles.setName("jTableFiles"); // NOI18N
        jScrollPane1.setViewportView(jTableFiles);

        jButtonSelectFiles.setText("Add files");
        jButtonSelectFiles.setName("jButtonSelectFiles"); // NOI18N
        jButtonSelectFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSelectFilesActionPerformed(evt);
            }
        });

        jProgressBar1.setName("jProgressBar1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jButtonPerform))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(jButtonSelectFiles))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 481, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonSelectFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonPerform)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButtonPerformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPerformActionPerformed
    doProcessing();
}//GEN-LAST:event_jButtonPerformActionPerformed

private void jButtonSelectFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSelectFilesActionPerformed
    JFileChooser fc = new JFileChooser();
    fc.setMultiSelectionEnabled(true);
    fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
    String dir = prefs.get("dir", "");
    fc.setCurrentDirectory(new File(dir));
    int ret = fc.showOpenDialog(this);
    if (ret == JFileChooser.APPROVE_OPTION) {
        File[] selectedFiles = fc.getSelectedFiles();
        for (File f : selectedFiles) {
            files.add(f);
        }
        if (selectedFiles.length > 0) {
            File f = selectedFiles[0];
            prefs.put("dir", f.getParent());
        }
        updateTable();
    }
    
}//GEN-LAST:event_jButtonSelectFilesActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                NpcXmlExporter f = new NpcXmlExporter();
                f.setLocationByPlatform(true);
                f.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPerform;
    private javax.swing.JButton jButtonSelectFiles;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFiles;
    // End of variables declaration//GEN-END:variables

    private void updateTable() {
        DefaultTableModel tm = new DefaultTableModel(new String[]{"File"}, 0);
        for (File f : files) {
            tm.addRow(new String[] {f.getName()});
        }
        jTableFiles.setModel(tm);
    }

}
