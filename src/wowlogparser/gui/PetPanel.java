/*
This file is part of Wow Log Parser, a program to parse World of Warcraft combat log files.
Copyright (C) Gustav Haapalahti

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

package wowlogparser.gui;

import wowlogparserbase.helpers.ListFunctions;
import wowlogparserbase.Fight;
import wowlogparserbase.PetInfo;
import wowlogparserbase.FileLoader;
import wowlogparserbase.FightParticipant;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JDialog;
import javax.swing.table.DefaultTableModel;
import wowlogparser.*;
import wowlogparserbase.PetParser;

/**
 *
 * @author  racy
 */
public class PetPanel extends javax.swing.JPanel {
    FileLoader fileLoader;
    List<Fight> fights;
    PetParser petParser;
    
    List<FightParticipant> pets = new ArrayList<FightParticipant>();
    List<FightParticipant> players = new ArrayList<FightParticipant>();
    List<PetInfo> tablePetNames = new ArrayList<PetInfo>();
    String[] columnNames = {"Pet name"};
    JDialog parent;
    
    /** Creates new form PetPanel */
    public PetPanel(List<Fight> fights, FileLoader fl, JDialog parent) {
        initComponents();
        this.parent = parent;
        this.fights = fights;
        this.fileLoader = fl;
        petParser = new PetParser(fileLoader, fights);
        for(FightParticipant p : petParser.getPlayers()) {
            players.add(p.createEmptyShell());
        }
        for(FightParticipant p : petParser.getPets()) {
            pets.add(p.createEmptyShell());
        }
        setModelPets();
        initTables();
    }
    
    public void initTables() {
        int k;
        for (k=0; k<players.size(); k++) {
            jComboBox1.addItem(players.get(k).getName());
        }
    }
    
    public void setModelPets() {
        int k;       
        //Make PetInfo array
        tablePetNames = new ArrayList<PetInfo>();
        ArrayList<PetInfo> assignedPetNames = new ArrayList<PetInfo>();
        for (k=0; k<pets.size(); k++) {
            tablePetNames.add(new PetInfo(pets.get(k)));
        }
        for (k=0; k<players.size(); k++) {
            assignedPetNames.addAll(players.get(k).getPetNames());
        }
        
        ListFunctions.remove(tablePetNames, assignedPetNames);
        
        DefaultTableModel tm = new DefaultTableModel(columnNames, tablePetNames.size());
        jTable1.setModel(tm);
        for (k=0; k<tablePetNames.size(); k++) {
            jTable1.setValueAt(tablePetNames.get(k).getName(), k, 0);
        }        
    }
        
    public void updatePlayerPets() {
        int k;
        int playerIndex = jComboBox1.getSelectedIndex();
        if ((playerIndex != -1)) {
            List<PetInfo> petNames = players.get(playerIndex).getPetNames();
            jComboBox2.removeAllItems();
            for (k=0; k<petNames.size(); k++) {
                jComboBox2.addItem(petNames.get(k).getName());
            }
        }
    }
    
    /**
     * Do automatic parsing of pets
     */
    private void tryAutomaticParsing() {
        players = new ArrayList<FightParticipant>();
        for (FightParticipant p : petParser.getParsedPlayers()) {
            players.add(p.createEmptyShell());
        }
        setModelPets();
        updatePlayerPets();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerSelected(evt);
            }
        });

        jLabel1.setText("Player");

        jLabel2.setText("Pets");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(4);
        jTextArea1.setText("Select a player from the left box, then mark the pets you want to assign to that player and press add pets. The right box shows the currently assigned pets that the selected player has.\nIf the pet and the owner you select does not exist together in any fight then an empty player is created to hold the pet.\nThe \"try automatic parsing\" button tries to match some kinds of pets to their owners, for example if a hunter feeds its pet or go for the throat is used.");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextArea1);

        jButton1.setText("Add pets");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPets(evt);
            }
        });

        jButton2.setText("Remove pets");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePets(evt);
            }
        });

        jButton3.setText("Apply");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyPressed(evt);
            }
        });

        jButton4.setText("Try automatic parsing");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tryAutomaticParsing(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 468, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(51, 51, 51)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jButton2)
                            .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 121, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jButton1))
                        .add(36, 36, 36)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 184, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jButton3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(jButton4)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(layout.createSequentialGroup()
                        .add(jButton1)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButton2))
                    .add(jButton4))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 332, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addPets(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPets
        int k;
        int[] rows = jTable1.getSelectedRows();
        int playerIndex = jComboBox1.getSelectedIndex();
        if ((rows.length > 0) && (playerIndex != -1)) {
            ArrayList<PetInfo> petNames = new ArrayList<PetInfo>();
            for(k=0; k<rows.length; k++) {
                petNames.add(new PetInfo(tablePetNames.get(rows[k])));
            }
            players.get(playerIndex).getPetNames().addAll(petNames);
            updatePlayerPets();
            setModelPets();
        }
    }//GEN-LAST:event_addPets

    private void playerSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerSelected
        updatePlayerPets();
    }//GEN-LAST:event_playerSelected

    private void removePets(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePets
        int playerIndex = jComboBox1.getSelectedIndex();
        players.get(playerIndex).getPetNames().clear();
        updatePlayerPets();
        setModelPets();
    }//GEN-LAST:event_removePets

    /**
     * Apply the selection made. That means adding correct pets to owners in the correct fights.
     * @param evt
     */
    private void applyPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyPressed
        PetParser.insertPetsOnPlayers(players, fights);
        parent.setVisible(false);
    }//GEN-LAST:event_applyPressed
    
private void tryAutomaticParsing(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tryAutomaticParsing
    tryAutomaticParsing();

}//GEN-LAST:event_tryAutomaticParsing
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
}
