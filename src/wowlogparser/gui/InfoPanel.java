/*
This file is part of Wow Log Parser, a program to parse World of Warcraft combat log files.
Copyright (C) Gustav Haapalahti

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/

package wowlogparser.gui;

/**
 *
 * @author  racy
 */
public class InfoPanel extends javax.swing.JPanel {
    
    /** Creates new form InfoPanel */
    public InfoPanel() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("The parser works in a multi step way. First the log file is parsed line by line to get a list of events classified by damage healing etc. The next step is to find fights. \n\nThe fights are formed by looking for damage events vs NPC:s. If a damage event vs an NPC is found and that NPC does not have a fight associated with it a new fight is added. All damage events done to the NPC and any damage the NPC does to someone else is added to the fight. All healing events done during the fight are also added to be able to find out who healed during the fight etc. If a UNIT_DIED event is found for the NPC then the fight is finished. If a UNIT_DIED event cannot be found then the fight is ended after a specified time has passed(can be found in the GUI). Damage events to other NPCs than the one the fight is about or other NPCs attacking players is not added to the fight. Those events are added to a special variable in the fight though, so they can be seen when splitting fights in the show all events dialog.\n\nWhen the fights are formed they are in turn processed to find the participants. Participants can only be players or pets.\n\nDPS for fights where the NPC did not die is calculated by finding the first and last damage event done to the NPC. The total fight time is then calculated as the time between the first and the last damage event done to the target. This is done to prevent DPS being too low because of no action being done for a long time. Active DPS is found out by going through all damage events and if there is a break in damage dealing for longer than 15 seconds (might have changed) then that break is subtracted from the total time. The active DPS is then the total damage divided by the active time.\n\n\n");
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    
}
