/*
This file is part of Wow Log Parser, a program to parse World of Warcraft combat log files.
Copyright (C) Gustav Haapalahti

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
*/
/*
 * MakeHtmlTabsSettingsDialog.java
 *
 * Created on 2009-jan-11, 01:39:33
 */

package wowlogparser.gui;

import java.io.File;
import java.util.prefs.Preferences;
import javax.swing.JFileChooser;

/**
 *
 * @author racy
 */
public class MakeHtmlTabsSettingsDialog extends javax.swing.JDialog {
    Preferences prefs;
    boolean result = false;

    private static int DEFAULT_WIDTH = 600;
    private static int DEFAULT_HEIGHT = 400;

    /** Creates new form MakeHtmlTabsSettingsDialog */
    public MakeHtmlTabsSettingsDialog(java.awt.Frame parent, boolean modal, Preferences basePrefs) {
        super(parent, modal);
        prefs = basePrefs.node("HtmlSettings");
        initComponents();
        loadSettings();
        updateControls();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextFieldOutputDir = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNote = new javax.swing.JTextField();
        jCheckBoxRaidGraphs = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jCheckBoxPlayerGraphs = new javax.swing.JCheckBox();
        jButtonCancel = new javax.swing.JButton();
        jButtonOk = new javax.swing.JButton();
        jButtonBrowse = new javax.swing.JButton();
        jCheckBoxRaidGraphsMulti = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldChartWidth = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldChartHeight = new javax.swing.JTextField();
        jCheckBoxCss = new javax.swing.JCheckBox();
        jTextFieldCss = new javax.swing.JTextField();
        jButtonBrowseCss = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextFieldOutputDir.setName("jTextFieldOutputDir"); // NOI18N

        jLabel1.setText("Output Directory");
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText("Guild name or other note to show on the report page");
        jLabel2.setName("jLabel2"); // NOI18N

        jTextFieldNote.setName("jTextFieldNote"); // NOI18N

        jCheckBoxRaidGraphs.setText("Make raid DPS and HPS graphs for each fight");
        jCheckBoxRaidGraphs.setName("jCheckBoxRaidGraphs"); // NOI18N

        jLabel3.setText("The following options may take a long time to perform on large reports");
        jLabel3.setName("jLabel3"); // NOI18N

        jCheckBoxPlayerGraphs.setText("Make individual Player DPS and HPS graphs for each fight");
        jCheckBoxPlayerGraphs.setName("jCheckBoxPlayerGraphs"); // NOI18N

        jButtonCancel.setText("Cancel");
        jButtonCancel.setName("jButtonCancel"); // NOI18N
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jButtonOk.setText("Ok");
        jButtonOk.setName("jButtonOk"); // NOI18N
        jButtonOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkActionPerformed(evt);
            }
        });

        jButtonBrowse.setText("Browse");
        jButtonBrowse.setName("jButtonBrowse"); // NOI18N
        jButtonBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseActionPerformed(evt);
            }
        });

        jCheckBoxRaidGraphsMulti.setText("Make raid DPS and HPS graphs for each fight, with one line for each player");
        jCheckBoxRaidGraphsMulti.setName("jCheckBoxRaidGraphsMulti"); // NOI18N

        jLabel4.setText("Chart width");
        jLabel4.setName("jLabel4"); // NOI18N

        jTextFieldChartWidth.setText("600");
        jTextFieldChartWidth.setName("jTextFieldChartWidth"); // NOI18N

        jLabel5.setText("Chart Height");
        jLabel5.setName("jLabel5"); // NOI18N

        jTextFieldChartHeight.setText("400");
        jTextFieldChartHeight.setName("jTextFieldChartHeight"); // NOI18N

        jCheckBoxCss.setText("Choose a custom CSS file. Should be a modification of the default one, not any file works.");
        jCheckBoxCss.setName("jCheckBoxCss"); // NOI18N
        jCheckBoxCss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxCssActionPerformed(evt);
            }
        });

        jTextFieldCss.setName("jTextFieldCss"); // NOI18N

        jButtonBrowseCss.setText("Browse");
        jButtonBrowseCss.setName("jButtonBrowseCss"); // NOI18N
        jButtonBrowseCss.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseCssActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxCss)
                    .addComponent(jCheckBoxPlayerGraphs)
                    .addComponent(jCheckBoxRaidGraphs)
                    .addComponent(jLabel3)
                    .addComponent(jCheckBoxRaidGraphsMulti)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldChartWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(27, 27, 27)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldChartHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))))
                        .addGap(206, 206, 206))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextFieldCss, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldNote, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                            .addComponent(jTextFieldOutputDir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
                            .addComponent(jButtonOk, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jButtonBrowse)
                                .addComponent(jButtonCancel))
                            .addComponent(jButtonBrowseCss))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldOutputDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowse))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxCss)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCss, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseCss))
                .addGap(70, 70, 70)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRaidGraphs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRaidGraphsMulti)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxPlayerGraphs)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldChartWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldChartHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCancel)
                    .addComponent(jButtonOk))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(jTextFieldOutputDir.getText()));
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fc.setDialogTitle("Choose a directory where the HTML files should be saved.");
        int res = fc.showDialog(this, "Ok");
        if (res == JFileChooser.APPROVE_OPTION) {
            File dir = fc.getSelectedFile();
            jTextFieldOutputDir.setText(dir.getAbsolutePath());
        }
    }//GEN-LAST:event_jButtonBrowseActionPerformed

    private void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkActionPerformed
        saveSettings();
        result = true;
        setVisible(false);
    }//GEN-LAST:event_jButtonOkActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        result = false;
        setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonBrowseCssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseCssActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(jTextFieldCss.getText()).getParentFile());
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Choose a customized CSS file.");
        int res = fc.showDialog(this, "Ok");
        if (res == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            jTextFieldCss.setText(f.getAbsolutePath());
        }
    }//GEN-LAST:event_jButtonBrowseCssActionPerformed

    private void jCheckBoxCssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxCssActionPerformed
        updateControls();
    }//GEN-LAST:event_jCheckBoxCssActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBrowse;
    private javax.swing.JButton jButtonBrowseCss;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOk;
    private javax.swing.JCheckBox jCheckBoxCss;
    private javax.swing.JCheckBox jCheckBoxPlayerGraphs;
    private javax.swing.JCheckBox jCheckBoxRaidGraphs;
    private javax.swing.JCheckBox jCheckBoxRaidGraphsMulti;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField jTextFieldChartHeight;
    private javax.swing.JTextField jTextFieldChartWidth;
    private javax.swing.JTextField jTextFieldCss;
    private javax.swing.JTextField jTextFieldNote;
    private javax.swing.JTextField jTextFieldOutputDir;
    // End of variables declaration//GEN-END:variables

    private void loadSettings() {
        String dir = prefs.get("dir", "");
        jTextFieldOutputDir.setText(dir);

        String note = prefs.get("note", "");
        jTextFieldNote.setText(note);

        boolean raidGraphs = prefs.getBoolean("raidGraphs", false);
        jCheckBoxRaidGraphs.setSelected(raidGraphs);

        boolean raidGraphsMulti = prefs.getBoolean("raidGraphsMulti", false);
        jCheckBoxRaidGraphsMulti.setSelected(raidGraphsMulti);

        boolean playerGraphs = prefs.getBoolean("playerGraphs", false);
        jCheckBoxPlayerGraphs.setSelected(playerGraphs);

        String chartHeight = prefs.get("chartHeight", "" + DEFAULT_HEIGHT);
        jTextFieldChartHeight.setText(chartHeight);

        String chartWidth = prefs.get("chartWidth", "" + DEFAULT_WIDTH);
        jTextFieldChartWidth.setText(chartWidth);

        boolean css = prefs.getBoolean("css", false);
        jCheckBoxCss.setSelected(css);

        String cssFilename = prefs.get("cssFilename", "");
        jTextFieldCss.setText(cssFilename);
    }

    private void saveSettings() {
        String dir = jTextFieldOutputDir.getText();
        prefs.put("dir", dir);

        String note = jTextFieldNote.getText();
        prefs.put("note", note);

        boolean raidGraphs = jCheckBoxRaidGraphs.isSelected();
        prefs.putBoolean("raidGraphs", raidGraphs);

        boolean raidGraphsMulti = jCheckBoxRaidGraphsMulti.isSelected();
        prefs.putBoolean("raidGraphsMulti", raidGraphsMulti);

        boolean playerGraphs = jCheckBoxPlayerGraphs.isSelected();
        prefs.putBoolean("playerGraphs", playerGraphs);

        String chartHeight = jTextFieldChartHeight.getText();
        prefs.put("chartHeight", chartHeight);

        String chartWidth = jTextFieldChartWidth.getText();
        prefs.put("chartWidth", chartWidth);

        boolean css = jCheckBoxCss.isSelected();
        prefs.putBoolean("css", css);

        String cssFilename = jTextFieldCss.getText();
        prefs.put("cssFilename", cssFilename);
    }

    private void updateControls() {
        if (jCheckBoxCss.isSelected()) {
            jTextFieldCss.setEnabled(true);
            jButtonBrowseCss.setEnabled(true);
        } else {
            jTextFieldCss.setEnabled(false);
            jButtonBrowseCss.setEnabled(false);
        }
    }

    public String getOutputDirectory() {
        return jTextFieldOutputDir.getText();
    }

    public String getNote() {
        return jTextFieldNote.getText();
    }

    public boolean isRaidGraphs() {
        return jCheckBoxRaidGraphs.isSelected();
    }

    public boolean isRaidGraphsMulti() {
        return jCheckBoxRaidGraphsMulti.isSelected();
    }

    public boolean isPlayerGraphs() {
        return jCheckBoxPlayerGraphs.isSelected();
    }

    public boolean isSuccessful() {
        return result;
    }

    public int getChartWidth() {
        int width = DEFAULT_WIDTH;
        try {
            String s = jTextFieldChartWidth.getText();
            double num = Double.parseDouble(s);
            width = (int)Math.round(num);
        } catch(NumberFormatException ex) {
        }
        return width;
    }

    public int getChartHeight() {
        int height = DEFAULT_HEIGHT;
        try {
            String s = jTextFieldChartHeight.getText();
            double num = Double.parseDouble(s);
            height = (int)Math.round(num);
        } catch(NumberFormatException ex) {
        }
        return height;
    }

    public boolean isCustomCss() {
        return jCheckBoxCss.isSelected();
    }

    public String getCustomCssFilename() {
        return jTextFieldCss.getText();
    }
}
