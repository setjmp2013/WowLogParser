/*
 * RotationDialog.java
 *
 * Created on den 8 oktober 2008, 19:47
 */

package wowlogparser.gui;

import wowlogparserbase.helpers.TableHelper;
import java.awt.BorderLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.RowSorter;
import javax.swing.RowSorter.SortKey;
import javax.swing.SortOrder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.statistics.HistogramDataset;
import wowlogparserbase.EventCollection;
import wowlogparserbase.RotationInfo;
import wowlogparserbase.RotationParser;
import wowlogparserbase.SpellInfo;

/**
 *
 * @author  racy
 */
public class RotationDialog extends javax.swing.JDialog {
    RotationParser rp;
    List<SpellInfo> sis;
    List<RotationInfo> ris;

    /** Creates new form RotationDialog */
    public RotationDialog(EventCollection ec, java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        rp = new RotationParser(ec);
        initTable(ec);
        pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRotations = new javax.swing.JTable();
        jPanelPlot = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTableRotations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableRotations.setName("jTableRotations"); // NOI18N
        jScrollPane1.setViewportView(jTableRotations);

        jPanelPlot.setName("jPanelPlot"); // NOI18N

        javax.swing.GroupLayout jPanelPlotLayout = new javax.swing.GroupLayout(jPanelPlot);
        jPanelPlot.setLayout(jPanelPlotLayout);
        jPanelPlotLayout.setHorizontalGroup(
            jPanelPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 825, Short.MAX_VALUE)
        );
        jPanelPlotLayout.setVerticalGroup(
            jPanelPlotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 331, Short.MAX_VALUE)
        );

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setEditable(false);
        jTextArea1.setRows(5);
        jTextArea1.setText("Stride is the time between two occations of a spell event\nIf spell cast success events exists for a spell, those are used exclusively.\nOtherwise direct damage events and healing events are used to find out when they are cast");
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane2.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelPlot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelPlot, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelPlot;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableRotations;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    private void initTable(EventCollection ec) {
        sis = rp.getSpells();
        ris = new ArrayList<RotationInfo>();
        for (SpellInfo si : sis) {
            ris.add(rp.getRotationInfo(si));
        }
        
        //Make table
        jTableRotations.setModel(new RotationInfoTableModel(sis, ris));
        TableHelper.setAutomaticColumnWidth(jTableRotations, 5);
        jTableRotations.setRowSorter(new TableRowSorter(jTableRotations.getModel()));
        List<SortKey> sortKeys = new ArrayList<SortKey>();
        sortKeys.add(new SortKey(3, SortOrder.DESCENDING));
        jTableRotations.getRowSorter().setSortKeys(sortKeys);
        
        jTableRotations.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int row = jTableRotations.getSelectedRow();
                    if (row > -1) {
                        row = jTableRotations.convertRowIndexToModel(row);
                        RotationInfo ri = ris.get(row);
                        SpellInfo si = sis.get(row);
                        makePlot(ri, si);
                    }
                }
            }

        });
    }

    private void makePlot(RotationInfo ri, SpellInfo si) {
        List<Double> strides = ri.getStrides();
        double[] vals = new double[strides.size()];
        for (int k=0; k<strides.size(); k++) {
            vals[k] = strides.get(k);
        }
        HistogramDataset dataset = new HistogramDataset();

        //int numBins = (int)Math.ceil(Math.log(strides.size()) / Math.log(2) + 1);
        
        //Modified Scott's method for number of bins, constant 0.5*sqrt(std)*size^1/3, default 3.5*std*size^1/3
        double h = 0.5*Math.sqrt(ri.getStrideStd())*Math.pow(strides.size(), 1.0/3.0);
        int numBins = 1;
        if (h>0) {
            numBins = (int)Math.ceil((ri.getStrideMax() - ri.getStrideMin())/h);
        }
        if (numBins < 5) {
            numBins = 5;
        }
        dataset.addSeries(si.name, vals, numBins);
        JFreeChart chart = ChartFactory.createHistogram("Histogram", "Stride (s)", "Occurances", dataset, PlotOrientation.VERTICAL, true, true, false);
        ChartPanel chartPanel = new ChartPanel(chart, true);
        jPanelPlot.removeAll();
        jPanelPlot.setLayout(new BorderLayout());
        jPanelPlot.add(chartPanel, BorderLayout.CENTER);
        jPanelPlot.validate();
    }
    
}
